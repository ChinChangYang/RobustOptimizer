function analyze_sensitivity
%ANALYZE_SENSITIVITY Sensitivity analysis on the parameters of a solver
%using scatter plots

% Common control
clear;
close all;

% Experiment settings
solver = 'SPS_L_SHADE_EIG';
fitfun = 'cec15_f3';
D = 10;
maxfunevals = D * 1e4;
lb = -100 * ones(D, 1);
ub = 100 * ones(D, 1);

% Parameter baseline
solverOptions.NP = 9 + 155;
solverOptions.F = 0.4085;
solverOptions.CR = 0.1980;
solverOptions.ER = 0.3172;
solverOptions.p = 0.2230;
solverOptions.H = 431;
solverOptions.Q = 151;
solverOptions.Ar = 1.7238;
solverOptions.cw = 0.1720;
solverOptions.erw = 0.1717;
solverOptions.CRmin = 0.0100;
solverOptions.CRmax = 0.0100 + 0.9248;
solverOptions.NPmin = 9;
solverOptions.crw = 0.9933;
solverOptions.fw = 0.4899;

% Sensitivity analysis parameters
% parameter = 'NP';
% parameter_lb = solverOptions.NPmin;
% parameter_ub = 2500;

% parameter = 'NPmin';
% parameter_lb = 4;
% parameter_ub = solverOptions.NP;

parameter = 'Ar';
parameter_lb = 1;
parameter_ub = 4;

% parameter = 'p';
% parameter_lb = eps;
% parameter_ub = 1;

if parameter_ub < solverOptions.(parameter)
    parameter_ub = max(0, solverOptions.(parameter) * 2);
end

% Common parameters
solverOptions.ftarget = 1e-8;
solverOptions.Display = 'off';
solverOptions.Noise = false;
solverOptions.EarlyStop = 'fitness';

% Estimate mean and standard deviation of the solution error of the optimum
% of algorithmic parameters
N = 30;
fmin = zeros(1, N);
parfor i = 1 : N
    [~, fmin(i), ~] = feval(...
        solver, ...
        fitfun, ...
        lb, ...
        ub, ...
        maxfunevals, ...
        solverOptions);
end

fmin(fmin < solverOptions.ftarget) = 0;
meanfmin = mean(fmin);
stdfmin = std(fmin);

% Find left-most point of similar solution error of the optimum
senoptions = optimset(...
    'MaxFunEvals', 30, ...
    'Display', 'iter', ...
    'TolX', 1e-5);

leftfun = @(x) left_point_fitness(...
    x, ...
    parameter, ...
    meanfmin, ...
    stdfmin, ...
    solver, ...
    fitfun, ...
    lb, ...
    ub, ...
    maxfunevals, ...
    solverOptions);

[a, ~] = fminbnd(leftfun, ...
    parameter_lb, ...
    solverOptions.(parameter), ...
    senoptions);

% Find right-most point of similar solution error of the optimum
senoptions = optimset(...
    'MaxFunEvals', 30, ...
    'Display', 'iter', ...
    'TolX', 1e-5);

rightfun = @(x) right_point_fitness(...
    x, ...
    parameter, ...
    meanfmin, ...
    stdfmin, ...
    solver, ...
    fitfun, ...
    lb, ...
    ub, ...
    maxfunevals, ...
    solverOptions);

[b, ~] = fminbnd(rightfun, ...
    solverOptions.(parameter), ...
    parameter_ub, ...
    senoptions);

% Evaluate the solution error of the left-most point of similar solution
% error of the optimum
% N = 30;
% S_fa = zeros(1, N);
% leftoptions = solverOptions;
% leftoptions.(parameter) = a;
% 
% parfor i = 1 : N
%     [~, S_fa(i), ~] = feval(...
%         solver, ...
%         fitfun, ...
%         lb, ...
%         ub, ...
%         maxfunevals, ...
%         leftoptions);
% end
% 
% S_fa(S_fa < solverOptions.ftarget) = 0;
% fa = mean(S_fa);

% Evaluate the solution error of the right-most point of similar solution
% error of the optimum
% N = 30;
% S_fb = zeros(1, N);
% rightoptions = solverOptions;
% rightoptions.(parameter) = b;
% 
% parfor i = 1 : N
%     [~, S_fb(i), ~] = feval(...
%         solver, ...
%         fitfun, ...
%         lb, ...
%         ub, ...
%         maxfunevals, ...
%         rightoptions);
% end
% 
% S_fb(S_fb < solverOptions.ftarget) = 0;
% fb = mean(S_fb);

% Evaluate the solution error of the lower bound
N = 30;
S_flb = zeros(1, N);
lboptions = solverOptions;
lboptions.(parameter) = parameter_lb;

parfor i = 1 : N
    [~, S_flb(i), ~] = feval(...
        solver, ...
        fitfun, ...
        lb, ...
        ub, ...
        maxfunevals, ...
        lboptions);
end

S_flb(S_flb < solverOptions.ftarget) = 0;
flb = mean(S_flb);

% Evaluate the solution error of the upper bound
N = 30;
S_fub = zeros(1, N);
uboptions = solverOptions;
uboptions.(parameter) = parameter_ub;

parfor i = 1 : N
    [~, S_fub(i), ~] = feval(...
        solver, ...
        fitfun, ...
        lb, ...
        ub, ...
        maxfunevals, ...
        uboptions);
end

S_fub(S_fub < solverOptions.ftarget) = 0;
fub = mean(S_fub);

% Generate simulated fa and fb
fa = min(flb, meanfmin + stdfmin);
fb = min(fub, meanfmin + stdfmin);

% Plot sensitivity analysis result
X = [parameter_lb, ...
    a, ...
    solverOptions.(parameter), ...
    b, ...
    parameter_ub];

Y = [flb, fa, meanfmin, fb, fub];

plot(X, Y);
hold on;
plot(X, repmat(meanfmin - stdfmin, 1, 5), 'r');
plot(X, repmat(meanfmin + stdfmin, 1, 5), 'r');
hold off;

title(sprintf('Sensitivity Analysis of %s on %s', solver, fitfun), ...
    'Interpreter','none');

xlabel(parameter);
ylabel('Solution Error');
end

function f = left_point_fitness(...
    x, ...
    parameter, ...
    meanfmin, ...
    stdfmin, ...
    solver, ...
    fitfun, ...
    lb, ...
    ub, ...
    maxfunevals, ...
    solverOptions)

solverOptions.(parameter) = x;

[~, fx, ~] = feval(...
    solver, ...
    fitfun, ...
    lb, ...
    ub, ...
    maxfunevals, ...
    solverOptions);

if fx < solverOptions.ftarget
    fx = 0;
end

f = x + 1e20 * max(0, abs(fx - meanfmin) - stdfmin);
end

function f = right_point_fitness(...
    x, ...
    parameter, ...
    meanfmin, ...
    stdfmin, ...
    solver, ...
    fitfun, ...
    lb, ...
    ub, ...
    maxfunevals, ...
    solverOptions)

solverOptions.(parameter) = x;

[~, fx, ~] = feval(...
    solver, ...
    fitfun, ...
    lb, ...
    ub, ...
    maxfunevals, ...
    solverOptions);

if fx < solverOptions.ftarget
    fx = 0;
end

f = -x + 1e20 * max(0, abs(fx - meanfmin) - stdfmin);
end