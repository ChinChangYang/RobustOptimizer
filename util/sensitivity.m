function [SX, SY] = sensitivity( ...
    solver, ...
    fitfun, ...
    lb, ...
    ub, ...
    maxfunevals, ...
    solverOptions, ...
    parameter_set, ...
    parameter_lbs, ...
    parameter_ubs)

% Sensitivity analysis core function
n_sampling = 30;
n_params = numel(parameter_set);
SX = zeros(n_sampling, n_params);
SY = zeros(n_sampling, n_params);

for i = 1 : n_params
    parameter = parameter_set{i};
    parameter_lb = parameter_lbs(i);
    parameter_ub = parameter_ubs(i);
    
    fprintf('Analyzing parameter %s ...\n', parameter);
    
    % Estimate sensitivity
    [SX(:, i), SY(:, i)] = sensitivity_core( ...
        solver, ...
        fitfun, ...
        lb, ...
        ub, ...
        maxfunevals, ...
        solverOptions, ...
        parameter, ...
        parameter_lb, ...
        parameter_ub, ...
        n_sampling);
end

end

function [X, Y] = sensitivity_core( ...
    solver, ...
    fitfun, ...
    lb, ...
    ub, ...
    maxfunevals, ...
    solverOptions, ...
    parameter, ...
    parameter_lb, ...
    parameter_ub, ...
    n_sampling)
%SENSITIVITY Sensitivity analysis on the parameters of a solver
%using scatter plots
Y = zeros(n_sampling, 1);
p = haltonset(1);
p = scramble(p, 'RR2');
X = net(p, n_sampling);
X(end) = 1;
X = parameter_lb + (parameter_ub - parameter_lb) .* X;
X = sort(X);

parfor i = 1 : n_sampling
    Y(i) = solution_error(...
        X(i), ...
        parameter, ...
        solver, ...
        fitfun, ...
        lb, ...
        ub, ...
        maxfunevals, ...
        solverOptions);
end
end

function f = solution_error(...
    x, ...
    parameter, ...
    solver, ...
    fitfun, ...
    lb, ...
    ub, ...
    maxfunevals, ...
    solverOptions)

solverOptions.(parameter) = x;

[~, f, ~] = feval(...
    solver, ...
    fitfun, ...
    lb, ...
    ub, ...
    maxfunevals, ...
    solverOptions);

if f < solverOptions.ftarget
    f = solverOptions.ftarget;
end
end