function [SX, SY, SZ] = sensitivity_2D( ...
    solver, ...
    fitfun, ...
    lb, ...
    ub, ...
    maxfunevals, ...
    solverOptions, ...
    parameter_pair, ...
    parameter_lbs, ...
    parameter_ubs, ...
    sensitivity_options)

% Parse sensitivity options
xScale = 'default';
yScale = 'default';

if isfield(sensitivity_options, 'XScale')
    if isequal(sensitivity_options.XScale, 'log')
        xScale = 'log';
    end
end

if isfield(sensitivity_options, 'YScale')
    if isequal(sensitivity_options.YScale, 'log')
        yScale = 'log';
    end
end

% Sensitivity analysis core function
n_sampling_x = 5;
n_sampling_y = 5;
SZ = zeros(n_sampling_x, n_sampling_y);

fprintf('Analyzing parameter pair (%s, %s)...\n', ...
    parameter_pair{1}, ...
    parameter_pair{2});

% Estimate sensitivity
if isequal(xScale, 'log')
    X = 1./(2.^((n_sampling_x-1):-1:0));
else
    X = linspace(0, 1, n_sampling_x);
end

if isequal(yScale, 'log')
    Y = 1./(2.^((n_sampling_y-1):-1:0));
else
    Y = linspace(0, 1, n_sampling_y);
end

X = parameter_lbs(1) + (parameter_ubs(1) - parameter_lbs(1)) .* X;
Y = parameter_lbs(2) + (parameter_ubs(2) - parameter_lbs(2)) .* Y;
[SX, SY] = meshgrid(X, Y);

parfor i = 1 : n_sampling_x
    for j = 1 : n_sampling_y
        SZ(i, j) = solution_error(...
            SX(i, j), ...
            SY(i, j), ...
            parameter_pair, ...
            solver, ...
            fitfun, ...
            lb, ...
            ub, ...
            maxfunevals, ...
            solverOptions);
    end
end
end

function f = solution_error(...
    x, ...
    y, ...
    parameter_pair, ...
    solver, ...
    fitfun, ...
    lb, ...
    ub, ...
    maxfunevals, ...
    solverOptions)

solverOptions.(parameter_pair{1}) = x;
solverOptions.(parameter_pair{2}) = y;

[~, f, ~] = feval(...
    solver, ...
    fitfun, ...
    lb, ...
    ub, ...
    maxfunevals, ...
    solverOptions);

if f < solverOptions.ftarget
    f = solverOptions.ftarget;
end
end